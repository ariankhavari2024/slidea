# Slidea — Web + Worker + KeyValue (Redis) + MinIO (S3) — uses EXISTING Postgres DB named "slidea-db"

services:
  # Redis-compatible store (Celery broker/result)
  - type: keyvalue
    name: slidea-redis
    plan: standard
    ipAllowList:
      - source: 0.0.0.0/0
        description: allow all (dev)

  # MinIO object storage (private S3 API)
  - type: pserv
    name: slidea-minio
    runtime: docker
    plan: starter
    repo: https://github.com/render-examples/minio.git
    numInstances: 1
    envVars:
      - key: MINIO_ROOT_USER
        value: slideaadmin           # <-- set a username you like
      - key: MINIO_ROOT_PASSWORD
        generateValue: true          # <-- auto-generated password
      - key: PORT
        value: "10000"
    disk:
      name: uploads
      mountPath: /data
      sizeGB: 1

  # Flask Web
  - type: web
    name: slidea-web
    runtime: docker
    plan: starter
    dockerfilePath: ./Dockerfile
    autoDeploy: true
    numInstances: 1
    healthCheckPath: /health
    envVars:
      # Python/Flask
      - key: PYTHON_VERSION
        value: "3.11"
      - key: FLASK_APP
        value: wsgi:app
      - key: FLASK_ENV
        value: production
      - key: WEB_CONCURRENCY
        value: "2"
      - key: SECRET_KEY
        generateValue: true

      # EXISTING Postgres (create in dashboard; just reference here)
      - key: DATABASE_URL
        fromDatabase:
          name: slidea-db
          property: connectionString

      # Redis URL
      - key: REDIS_URL
        fromService:
          name: slidea-redis
          type: keyvalue
          property: connectionString

      # S3/MinIO creds for storage.py
      - key: S3_ENDPOINT
        value: http://slidea-minio:10000
      - key: S3_ACCESS_KEY
        fromService:
          name: slidea-minio
          type: pserv
          envVarKey: MINIO_ROOT_USER
      - key: S3_SECRET_KEY
        fromService:
          name: slidea-minio
          type: pserv
          envVarKey: MINIO_ROOT_PASSWORD
      - key: S3_BUCKET
        value: slidea-uploads
      - key: S3_USE_SSL
        value: "false"

      # Third‑party secrets (set in dashboard)
      - key: OPENAI_API_KEY
        sync: false
      - key: STRIPE_SECRET_KEY
        sync: false
      - key: STRIPE_PUBLISHABLE_KEY
        sync: false
      - key: STRIPE_ENDPOINT_SECRET
        sync: false
      - key: STRIPE_PRICE_ID_PRO
        sync: false
      - key: STRIPE_PRICE_ID_CREATOR
        sync: false

      - key: SERVICE_TYPE
        value: web
      - key: IS_WEB_SERVICE
        value: "true"

  # Celery Worker (same image — override start command!)
  - type: worker
    name: slidea-worker
    runtime: docker
    plan: starter
    dockerfilePath: ./Dockerfile
    autoDeploy: true
    numInstances: 1
    # ⬇️ Change "app.celery_app" to your actual Celery instance path
    startCommand: >
      celery -A app.celery_app worker --loglevel=INFO --concurrency=2
    envVars:
      - key: PYTHON_VERSION
        value: "3.11"
      - key: FLASK_ENV
        value: production

      # share SECRET_KEY with web
      - key: SECRET_KEY
        fromService:
          name: slidea-web
          type: web
          envVarKey: SECRET_KEY

      - key: DATABASE_URL
        fromDatabase:
          name: slidea-db
          property: connectionString

      - key: REDIS_URL
        fromService:
          name: slidea-redis
          type: keyvalue
          property: connectionString

      # S3/MinIO
      - key: S3_ENDPOINT
        value: http://slidea-minio:10000
      - key: S3_ACCESS_KEY
        fromService:
          name: slidea-minio
          type: pserv
          envVarKey: MINIO_ROOT_USER
      - key: S3_SECRET_KEY
        fromService:
          name: slidea-minio
          type: pserv
          envVarKey: MINIO_ROOT_PASSWORD
      - key: S3_BUCKET
        value: slidea-uploads
      - key: S3_USE_SSL
        value: "false"

      - key: OPENAI_API_KEY
        sync: false
      - key: STRIPE_SECRET_KEY
        sync: false
      - key: STRIPE_PRICE_ID_PRO
        sync: false
      - key: STRIPE_PRICE_ID_CREATOR
        sync: false

      - key: SERVICE_TYPE
        value: worker
      - key: IS_WEB_SERVICE
        value: "false"
