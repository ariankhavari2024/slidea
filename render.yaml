# render.yaml
# Blueprint for deploying the SlideaAI Flask application on Render
# Defining Redis as a Private Service (pserv) with env: redis

# Managed Database Definition (Using top-level key)
databases:
  - name: slidea-db
    plan: starter # IMPORTANT: Use a paid plan (e.g., 'starter') for persistence.
    databaseName: slidea_db # Optional: specify the database name Render creates
    user: slidea_user # Optional: specify the user Render creates
    # Version and Disk are typically managed by Render based on the plan/UI settings

# Application Services Definition
services:
  # Redis Cache/Broker (Defined as a Private Service)
  - type: pserv # Private Service
    name: slidea-redis
    env: redis # Specify the environment type as redis
    plan: free # Free tier is usually okay for Redis cache/broker initially
    # NOTE: No nested 'redis:' block here

  # Flask Web Service (using Gunicorn)
  - type: web
    name: slidea-web
    env: docker # Build and run using the Dockerfile
    plan: starter # IMPORTANT: Use a paid plan (e.g., starter) for non-sleeping service
    dockerfilePath: ./Dockerfile # Path to your Dockerfile relative to the root
    envVars:
      # --- Core Flask/Python Settings ---
      - key: PYTHON_VERSION
        value: 3.11
      - key: FLASK_APP
        value: wsgi:app
      - key: FLASK_ENV
        value: production
      - key: SECRET_KEY
        generateValue: true
      # --- Database & Redis Connection ---
      # DATABASE_URL is automatically injected because 'databases:' is defined above.
      # REDIS_URL is automatically injected because a service named 'slidea-redis'
      # of type 'pserv' with 'env: redis' is defined in this 'services' list.
      # Ensure your config.py reads os.environ.get('DATABASE_URL') and os.environ.get('REDIS_URL')
      # --- Celery Config (Point to the automatically injected REDIS_URL) ---
      - key: CELERY_BROKER_URL
        fromEnvVar: REDIS_URL # Use the URL Render injects
      - key: CELERY_RESULT_BACKEND
        fromEnvVar: REDIS_URL # Use the URL Render injects
      # --- External API Keys (Set these in Render Dashboard Environment Secrets) ---
      - key: OPENAI_API_KEY
        sync: false
      - key: STRIPE_SECRET_KEY
        sync: false
      - key: STRIPE_PUBLISHABLE_KEY
        sync: false
      - key: STRIPE_ENDPOINT_SECRET
        sync: false
      - key: STRIPE_PRICE_ID_PRO
        sync: false
      - key: STRIPE_PRICE_ID_CREATOR
        sync: false
      # --- Service Type Identification for entrypoint.sh ---
      - key: SERVICE_TYPE
        value: web
      - key: IS_WEB_SERVICE
        value: "true"
      # --- Gunicorn/Web Concurrency (Optional) ---
      # - key: WEB_CONCURRENCY
      #   value: 3

  # Celery Worker Service
  - type: worker
    name: slidea-worker
    env: docker # Build and run using the Dockerfile
    plan: starter # IMPORTANT: Use a paid plan (e.g., starter) for non-sleeping service
    dockerfilePath: ./Dockerfile
    envVars:
      # Inherit most variables from the web service or set explicitly
      - key: PYTHON_VERSION
        value: 3.11
      - key: FLASK_APP
        value: wsgi:app
      - key: FLASK_ENV
        value: production
      - key: SECRET_KEY
        fromService:
          type: web
          name: slidea-web
          envVarKey: SECRET_KEY
      # --- Database & Redis Connection (Render injects these automatically) ---
      # DATABASE_URL and REDIS_URL are automatically injected
      # --- Celery Config (Point to the automatically injected REDIS_URL) ---
      - key: CELERY_BROKER_URL
        fromEnvVar: REDIS_URL
      - key: CELERY_RESULT_BACKEND
        fromEnvVar: REDIS_URL
      # --- External API Keys (Set these in Render Dashboard Environment Secrets) ---
      - key: OPENAI_API_KEY
        sync: false
      - key: STRIPE_SECRET_KEY
        sync: false
      # --- Service Type Identification for entrypoint.sh ---
      - key: SERVICE_TYPE
        value: worker
      - key: IS_WEB_SERVICE
        value: "false"
